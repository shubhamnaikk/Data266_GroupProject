from __future__ import annotations
from typing import Any, Dict, List, Tuple, Optional, Protocol

class Connector(Protocol):
    driver: str  # 'postgres' | 'mysql' | 'snowflake'

    def test_connection(self) -> Dict[str, Any]: ...
    def enforce_session_readonly(self, conn: Any) -> None: ...
    def introspect_schema(self, limit_samples: int = 5) -> Dict[str, Any]: ...
    def preview(self, sql_text: str, limit: int = 20) -> List[List[Any]]: ...
    def validate(self, sql_text: str) -> Dict[str, Any]: ...
    def execute_readonly(self, sql_text: str, limit: Optional[int]=None) -> Tuple[List[str], List[List[Any]]]: ...
    def quote_ident(self, name: str) -> str: ...
    def limit_clause(self, n: int) -> str: ...

def single_statement_select_only(sql_text: str) -> None:
    # quick gate; Person A scope â€” parser can be swapped later
    bad = (";"," UPDATE "," DELETE "," INSERT "," MERGE "," TRUNCATE "," CREATE "," ALTER "," DROP ",
           " COPY "," UNLOAD "," CALL "," EXEC "," GRANT "," REVOKE ")
    s = " " + sql_text.upper().strip() + " "
    if not s.strip().upper().startswith("SELECT"):
        raise ValueError("Only SELECT is allowed")
    for b in bad:
        if b in s:
            raise ValueError(f"Forbidden token in SQL: {b.strip()}")
